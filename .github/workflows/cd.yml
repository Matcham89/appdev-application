name: 'cd-workflow'
on:
  push:
    branches:
    - main


env:
  STATE_BUCKET: 
  IMAGE_NAME: appdev-application-test
  RESOURCE_CLOUD_RUN: 

jobs:
  verify:
    name: Verify Code
    runs-on: ubuntu-latest

  deploy:
    name: Deployment
    needs: verify
    permissions:
      contents: 'read'
      id-token: 'write'
    
    runs-on: ubuntu-latest
    steps:

      #
      # Set environment specific variables
      #

      - name: Set Variables DEV
        if: github.ref_name == 'main' || github.ref_name == 'WB-77'
        run: |
          echo TARGET_ENVIRONMENT=dev >> $GITHUB_ENV
          echo PROJECT_ID=dev >> $GITHUB_ENV 
          echo PROJECT_NUMBER=dev >> $GITHUB_ENV 
          echo WORKLOAD_IDENTITY_PROVIDER=projects/391620017450/locations/global/workloadIdentityPools/github-pl/providers/github-actions-provider >> $GITHUB_ENV 
          echo SERVICE_ACCOUNT="" >> $GITHUB_ENV 
          echo BUCKET_PREFIX=dev >> $GITHUB_ENV

      - name: Check env specific variables
        run: |
          echo env.TARGET_ENVIRONMENT=${{ env.TARGET_ENVIRONMENT }}
          echo env.PROJECT_ID=${{ env.PROJECT_ID }}
          echo env.PROJECT_NUMBER=${{ env.PROJECT_NUMBER }}
          echo env.WORKLOAD_IDENTITY_PROVIDER=${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          echo env.SERVICE_ACCOUNT=${{ env.SERVICE_ACCOUNT }}
          echo env.BUCKET_PREFIX=${{ env.BUCKET_PREFIX }}

      #
      # Checkout code and set up tooling
      #

      - name: Checkout
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: access_token
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Get tf outputs
        uses: dflook/terraform-remote-state@v1
        id: tf-outputs
        with:
          backend_type: gcs
          backend_config: |
            bucket=${{ env.STATE_BUCKET }}
            prefix=${{ env.BUCKET_PREFIX }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: beta

      - name: Configure Docker Client
        run: |
          gcloud auth configure-docker 
          gcloud auth configure-docker ${{ steps.tf-outputs.outputs.REGION }}-docker.pkg.dev

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      #
      # Set shared variables
      #

      - name: Set shared variables
        run: |
          echo "FULL_IMAGE_NAME=${{ steps.tf-outputs.outputs.REGION }}-docker.pkg.dev/${{ steps.tf-outputs.outputs.REPO_PROJECT_ID }}/${{ steps.tf-outputs.outputs.ARTIFACT_REPOSTIORY_NAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Check shared variables
        run: |
          echo env.FULL_IMAGE_NAME=${{ env.FULL_IMAGE_NAME }}
          echo env.IMAGE_TAG=${{ env.IMAGE_TAG }}

      #
      # Build and push docker image
      #

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ env.FULL_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          push: true

      - name: Get Image Digest
        run : |
          gcloud artifacts docker images describe ${{ env.FULL_IMAGE_NAME }}:${{ env.IMAGE_TAG }} --format 'value(image_summary.digest)' > ./image-sha.txt
          cat image-sha.txt


      #Attest Image for Binary Authorization
      - name: Binary Auth Stage
        run: |
          gcloud beta container binauthz attestations sign-and-create \
            --project=${{ steps.tf-outputs.outputs.RESOURCE_PROJECT }} \
            --artifact-url="${{ env.FULL_IMAGE_NAME }}@`cat ./image-sha.txt`" \
            --attestor=projects/${{ steps.tf-outputs.outputs.RESOURCE_PROJECT}}/attestors/attestor-${{ steps.tf-outputs.outputs.RESOURCE_PROJECT }} \
            --keyversion-project=${{ steps.tf-outputs.outputs.RESOURCE_PROJECT }} \
            --keyversion-location=global \
            --keyversion-keyring=${{ steps.tf-outputs.outputs.KEYRING_NAME }} \
            --keyversion-key=${{ steps.tf-outputs.outputs.KEY_NAME }} \
            --keyversion=${{ steps.tf-outputs.outputs.KEY_VERSION }}

      # Run Kritis Signer

      - name: Kritis Cache
        id: cache-kritis
        uses: actions/cache@v3
        with:
          path: /home/runner/go/bin
          key: ${{ runner.os }}-kritis

      - name: Build Kritis
        if: steps.cache-kritis.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/grafeas/kritis.git
          cd kritis/ && rm go.mod go.sum && go mod init github.com/grafeas/kritis && go mod tidy && go mod vendor
          cd cmd/kritis/signer
          CGO_ENABLED=0 GO11MODULE=on GOOS=linux GOARCH=amd64 go install
          chmod +x /home/runner/go/bin/signer

      - name: Run Kritis Check
        run: |
          cp /home/runner/go/bin/signer /usr/local/bin/
          signer \
            -mode=check-only -v=10 -alsologtostderr \
            -image=${{ env.FULL_IMAGE_NAME }}@`cat ./image-sha.txt` \
            -policy=.github/kritis-policy.yml

      #
      # Deploy to Cloud Run
      #

      - name: Cloud Run Deployment
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          project_id: ${{ steps.tf-outputs.outputs.RESOURCE_PROJECT }}
          region: ${{ steps.tf-outputs.outputs.REGION }}
          service: ${{ env.RESOURCE_CLOUD_RUN }}
          image: ${{ env.FULL_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          flags: |
            --port=3000
            --binary-authorization=default
            --allow-unauthenticated
            --ingress=all
            --cpu=1
            --memory=512Mi
            --min-instances=1
            --max-instances=2
            --service-account=${{ steps.tf-outputs.outputs.CLOUD_RUN_SA_EMAIL_WEBAPP }}
          env_vars: |
            APP_REGION=${{ steps.tf-outputs.outputs.REGION }}
            GOOGLE_CLOUD_PROJECT=${{ steps.tf-outputs.outputs.RESOURCE_PROJECT }}
          #secrets: |


      - name: Tag image for env
        run: |
          gcloud artifacts docker tags add \
            ${{ env.FULL_IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            ${{ env.FULL_IMAGE_NAME }}:${{ env.TARGET_ENVIRONMENT }}
